?head()
library(utils)
head <- utils::head
install.packages("utils")
?head
runApp()
runExample("02_text")
runExample("04_mpg")
runExample("09_upload")
runExample("10_download")
runExample("11_timer")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp("stockVis")
# Load packages ----
library(shiny)
library(bslib)
library(quantmod)
# Source helpers ----
source("helpers.R")
# Load packages
library(shiny)
library(bslib)
library(ggplot2)
# Get the data
file <- "https://github.com/rstudio-education/shiny-course/raw/main/movies.RData"
destfile <- "movies.RData"
download.file(file, destfile)
# Load data
load("movies.RData")
# Define UI
ui <- page_sidebar(
sidebar = sidebar(
# Select variable for y-axis
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
# Select variable for x-axis
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
)
),
# Output: Show scatterplot
card(plotOutput(outputId = "scatterplot"))
)
# Define server
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
}
# Create a Shiny app object
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(bslib)
library(ggplot2)
# Load data --------------------------------------------------------------------
load("movies.RData")
# Define UI --------------------------------------------------------------------
ui <- page_sidebar(
# Inputs: Select variables to plot
sidebar = sidebar(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "___",
label = "____",
choices = c(___),
# Load packages ----------------------------------------------------------------
library(shiny)
library(bslib)
library(ggplot2)
# Load data --------------------------------------------------------------------
load("movies.RData")
# Define UI --------------------------------------------------------------------
ui <- page_sidebar(
# Inputs: Select variables to plot
sidebar = sidebar(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"),
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c("title_type", "genre", "mpaa_rating", "critics_rating", "audience_rating"),
selected = "mpaa_rating")
),
# Output: Show scatterplot
card(
plotOutput(outputId = "scatterplot")
)
)
# Define server ----------------------------------------------------------------
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y,
color = input$z)) +
geom_point()
})
}
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(bslib)
library(ggplot2)
# Load data --------------------------------------------------------------------
load("movies.RData")
# Define UI --------------------------------------------------------------------
ui <- page_sidebar(
# Inputs: Select variables to plot
sidebar = sidebar(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c(___ = "imdb_rating",
# Load packages ----------------------------------------------------------------
library(shiny)
library(bslib)
library(ggplot2)
# Load data --------------------------------------------------------------------
load("movies.RData")
# Define UI --------------------------------------------------------------------
ui <- page_sidebar(
# Inputs: Select variables to plot
sidebar = sidebar(
# Select variable for y-axis
selectInput(inputId = "y",
label = "Y-axis:",
choices = c("IMDB rating"          = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics score"        = "critics_score",
"Audience score"       = "audience_score",
"Runtime"              = "runtime"),
selected = "audience_score"),
# Select variable for x-axis
selectInput(inputId = "x",
label = "X-axis:",
choices = c(
"IMDB rating"          = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics score"        = "critics_score",
"Audience score"       = "audience_score",
"Runtime"              = "runtime"),
selected = "critics_score"),
# Select variable for color
# Select variable for color
selectInput(inputId = "z",
label = "Color by:",
choices = c(
"Title type" = "title_type",
"Genre" = "genre",
"MPAA rating" = "mpaa_rating",
"Critics rating" = "critics_rating",
"Audience rating" = "audience_rating"),
selected = "mpaa_rating")
),
# Output: Show scatterplot
card(
plotOutput(outputId = "scatterplot")
)
)
# Define server ----------------------------------------------------------------
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y,
color = input$z)) +
geom_point()
})
}
# Create a Shiny app object ----------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(ggplot2)
library(bslib)
# Load data --------------------------------------------------------------------
load("movies.RData")
# Define UI --------------------------------------------------------------------
ui <- page_sidebar(
sidebar = sidebar(
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "audience_score"
),
selectInput(
inputId = "x",
label = "X-axis:",
choices = c("imdb_rating", "imdb_num_votes", "critics_score", "audience_score", "runtime"),
selected = "critics_score"
)
),
card(
plotOutput(outputId = "scatterplot"),
plotOutput(outputId = "densityplot", height = 200)
)
)
# Define server ----------------------------------------------------------------
server <- function(input, output, session) {
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y)) +
geom_point()
})
output$densityplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x)) +
geom_density()
})
}
# Create the Shiny app object --------------------------------------------------
shinyApp(ui = ui, server = server)
# Load packages ----------------------------------------------------------------
library(shiny)
library(bslib)
library(ggplot2)
library(tools)
# Load data --------------------------------------------------------------------
load("movies.RData")
# Define UI --------------------------------------------------------------------
ui <- page_sidebar(theme = bs_theme(preset = "vapor"),
sidebar = sidebar(
selectInput(
inputId = "y",
label = "Y-axis:",
choices = c(
"IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"
),
selected = "audience_score"
),
selectInput(
inputId = "x",
label = "X-axis:",
choices = c(
"IMDB rating" = "imdb_rating",
"IMDB number of votes" = "imdb_num_votes",
"Critics Score" = "critics_score",
"Audience Score" = "audience_score",
"Runtime" = "runtime"
),
selected = "critics_score"
),
selectInput(
inputId = "z",
label = "Color by:",
choices = c(
"Title Type" = "title_type",
"Genre" = "genre",
"MPAA Rating" = "mpaa_rating",
"Critics Rating" = "critics_rating",
"Audience Rating" = "audience_rating"
),
selected = "mpaa_rating"
),
sliderInput(
inputId = "alpha",
label = "Alpha:",
min = 0, max = 1,
value = 0.5
),
sliderInput(
inputId = "size",
label = "Size:",
min = 0, max = 5,
value = 2
),
textInput(
inputId = "plot_title",
label = "Plot title",
placeholder = "Enter text to be used as plot title"
),
actionButton(
inputId = "update_plot_title",
label = "Update plot title"
)
),
card(
markdown(
"These data were obtained from [IMBD](http://www.imbd.com/) and [Rotten Tomatoes](https://www.rottentomatoes.com/).
The data represent 651 randomly sampled movies released between 1972 to 2014 in the United States."
),
plotOutput(outputId = "scatterplot")
)
)
# Define server ----------------------------------------------------------------
server <- function(input, output, session) {
new_plot_title <- eventReactive(
eventExpr = input$update_plot_title,
valueExpr = {
toTitleCase(input$plot_title)
}
)
output$scatterplot <- renderPlot({
ggplot(data = movies, aes_string(x = input$x, y = input$y, color = input$z)) +
geom_point(alpha = input$alpha, size = input$size) +
labs(title = new_plot_title())
})
}
# Create the Shiny app object --------------------------------------------------
shinyApp(ui = ui, server = server)
runExample("06_tabsets")
runExample("07_widgets")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?helpText
runApp()
library(ggplot2)
library(dplyr)
library(boot)
library(DEP)
library(tidyverse)
# Load the data
protein_data <- read.delim("/Users/hzha0252/Documents/5. DIA-Analyst/Solvent profilling/data/20240215_124144_SPP-ONE-POT-GS_Report.tsv", check.names = F)
# exp_design <- read_csv("/Users/hzha0252/Documents/5. DIA-Analyst/Solvent profilling/data/Lysate-exp1-one-pot_exptDesign.csv")
exp_design <- read_csv("/Users/hzha0252/Documents/5. DIA-Analyst/Solvent profilling/data/exptDesign_with_condition&replicates.csv")
# id_col - "PG.ProteinGroups"
# intensity_cols - endwith("PG.Quantity)
# selected_protein <- "transcript=PF3D7_0513300.1"
selected_protein <- "transcript=PF3D7_1476500.1"
data <- protein_data[protein_data$PG.ProteinGroups == selected_protein, grep("PG.Quantity", names(protein_data))]
data <- t(data) %>% data.frame() %>% rownames_to_column()
names(data) <- c("label", "intensity")
data <- data %>% right_join(exp_design, by = c("label" = "column"))
data$treatment <- factor(data$treatment)
data$condition <- factor(data$condition)
names(data) = make.names(names(data))
# in seaborn line (from python)
# By default, the plot aggregates over multiple y values (intensity) at each value of x (solv%) and shows an estimate of
# the central tendency and a confidence interval for that estimate.
# estimator='mean', errorbar=('ci', 95)
# Function to calculate the mean for bootstrapping
boot_mean <- function(data, indices) {
return(mean(data[indices]))
}
# Function to perform bootstrapping and calculate CIs for each group
bootstrap_ci <- function(data, abundance, n_bootstrap = 1000) {
results <- data %>%
group_by(solv., treatment) %>%
do({
boot_result <- boot(.[[abundance]], statistic = boot_mean, R = n_bootstrap)
ci <- boot.ci(boot_result, type = "perc")
data.frame(
mean_abundance = mean(.[[abundance]]),
ci_lower = if(!is.null(ci)) ci$percent[4] else NA,
ci_upper = if(!is.null(ci)) ci$percent[5] else NA
)
}) %>%
ungroup()
return(results)
}
# Calculate bootstrapped confidence intervals
boot_data <- bootstrap_ci(data, "intensity")
# Plot the data with shaded CI area
p <- ggplot(boot_data, aes(x = solv., y = mean_abundance, color = treatment, group = treatment)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatment), color = NA, alpha = 0.2) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, alpha = 0.2) +
labs(x = "Solv%", y = "Mean Abundance", title = "Mean Abundance by Solv% and Treatment with Bootstrapped CI") +
theme_DEP1() +
scale_color_manual(values = c("#2a7bb7", "#ff8626")) +
scale_fill_manual(values = c("#2a7bb7", "#ff8626")) +
theme(legend.position = "top")
p
?selectInput
runApp()
runApp()
runApp()
runApp()
base::capture.output(suppressMessages({
# Your code here
}))
?capture.output
conflicts()
install.packages("utils")
library(utils)
base::capture.output(suppressMessages({
# Your code here
}))
install.packages("installr")
library(utils)
base::capture.output(suppressMessages({
# Your code here
}))
exists("capture.output", where = "package:utils")
update.packages()
.libPaths()
dyn.load(paste0(.libPaths()[1], "/utils/libs/utils.so"))
update.packages(checkBuilt = TRUE)
install.packages("installr")
library(installr)
updateR()
packageVersion("utils")
# Check where the utils package is installed
.libPaths()
runApp('~/Documents/Github/LFQ-Analyst_Fragpipe')
?ggplot
?geom_line
?ggplot
runApp()
shiny::runApp()
# Load necessary libraries
library(ggplot2)
library(dplyr)
library(boot)
library(DEP)
library(tidyverse)
# Load the data
protein_data <- read.delim("/Users/hzha0252/Documents/5. DIA-Analyst/Solvent profilling/data/20240215_124144_SPP-ONE-POT-GS_Report.tsv", check.names = F)
# exp_design <- read_csv("/Users/hzha0252/Documents/5. DIA-Analyst/Solvent profilling/data/Lysate-exp1-one-pot_exptDesign.csv")
exp_design <- read_csv("/Users/hzha0252/Documents/5. DIA-Analyst/Solvent profilling/data/exptDesign_with_condition&replicates.csv")
# id_col - "PG.ProteinGroups"
# intensity_cols - endwith("PG.Quantity)
# selected_protein <- "transcript=PF3D7_0513300.1"
selected_protein <- "transcript=PF3D7_1476500.1"
data <- protein_data[protein_data$PG.ProteinGroups == selected_protein, grep("PG.Quantity", names(protein_data))]
data <- t(data) %>% data.frame() %>% rownames_to_column()
names(data) <- c("label", "intensity")
data <- data %>% right_join(exp_design, by = c("label" = "column"))
data$treatment <- factor(data$treatment)
data$condition <- factor(data$condition)
names(data) = make.names(names(data))
# in seaborn line (from python)
# By default, the plot aggregates over multiple y values (intensity) at each value of x (solv%) and shows an estimate of
# the central tendency and a confidence interval for that estimate.
# estimator='mean', errorbar=('ci', 95)
# Function to calculate the mean for bootstrapping
boot_mean <- function(data, indices) {
return(mean(data[indices]))
}
# Function to perform bootstrapping and calculate CIs for each group
bootstrap_ci <- function(data, abundance, n_bootstrap = 1000) {
results <- data %>%
group_by(solv., treatment) %>%
do({
boot_result <- boot(.[[abundance]], statistic = boot_mean, R = n_bootstrap)
ci <- boot.ci(boot_result, type = "perc")
data.frame(
mean_abundance = mean(.[[abundance]]),
ci_lower = if(!is.null(ci)) ci$percent[4] else NA,
ci_upper = if(!is.null(ci)) ci$percent[5] else NA
)
}) %>%
ungroup()
return(results)
}
# Calculate bootstrapped confidence intervals
boot_data <- bootstrap_ci(data, "intensity")
# Plot the data with shaded CI area
p <- ggplot(boot_data, aes(x = solv., y = mean_abundance, color = treatment, group = treatment)) +
geom_line() +
geom_point() +
geom_ribbon(aes(ymin = ci_lower, ymax = ci_upper, fill = treatment), color = NA, alpha = 0.2) +
geom_errorbar(aes(ymin = ci_lower, ymax = ci_upper), width = 0.2, alpha = 0.2) +
labs(x = "Solv%", y = "Mean Abundance", title = "Mean Abundance by Solv% and Treatment with Bootstrapped CI") +
theme_DEP1() +
scale_color_manual(values = c("#2a7bb7", "#ff8626")) +
scale_fill_manual(values = c("#2a7bb7", "#ff8626")) +
theme(legend.position = "top")
p
runApp()
runApp()
runApp()
runApp('~/Documents/Github/TMT-Analyst')
install.packages("sva")
BiocManager::install(("sva")
)
runApp('~/Documents/Github/TMT-Analyst')
runApp('~/Documents/Github/TMT-Analyst')
