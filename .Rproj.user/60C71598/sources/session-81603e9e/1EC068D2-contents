# Load necessary libraries
library(ggplot2)
library(gridExtra)
library(ggpubr)
library(dplyr)
library(tidyr)

# Emphasize Objective
cat("Objective: Normalize phosphosite intensity values by accounting for changes in protein levels to reflect true biological phosphorylation changes.\n")

# Simulate large data (replace this with your actual data)
set.seed(123)
n <- 18380
conditions <- 5
replicates <- 4
n_per_condition <- n / conditions
n_per_replicate <- n_per_condition / replicates

df <- data.frame(
  phosphosite_intensity = rnorm(n, mean = 1000, sd = 200),
  protein_intensity = rnorm(n, mean = 500, sd = 100),
  condition = rep(paste0("Condition", 1:conditions), each = n_per_condition),
  replicate = rep(rep(paste0("Replicate", 1:replicates), each = n_per_replicate), conditions)
)

# Apply correction methods (replace these with your actual correction methods)
df <- df %>%
  group_by(condition, replicate) %>%
  mutate(
    corrected_method1 = phosphosite_intensity * (median(protein_intensity) / protein_intensity),
    corrected_method2 = (phosphosite_intensity / protein_intensity) * mean(protein_intensity)
  ) %>%
  ungroup()

# Coefficient of Variation (CV) calculation function
calculate_cv <- function(x) {
  sd(x) / mean(x)
}

# Calculate CVs
cv_before <- df %>% group_by(condition, replicate) %>% summarise(cv = calculate_cv(phosphosite_intensity))
cv_method1 <- df %>% group_by(condition, replicate) %>% summarise(cv = calculate_cv(corrected_method1))
cv_method2 <- df %>% group_by(condition, replicate) %>% summarise(cv = calculate_cv(corrected_method2))

# Print average CVs
cat("Average CV before correction: ", mean(cv_before$cv), "\n")
cat("Average CV after correction with method 1: ", mean(cv_method1$cv), "\n")
cat("Average CV after correction with method 2: ", mean(cv_method2$cv), "\n")

# Function to plot hexbin correlations
plot_hexbin_correlations <- function(data, x, y, title) {
  ggplot(data, aes_string(x = x, y = y)) +
    geom_hex(bins = 30) +  # Adjust bins as needed
    scale_fill_viridis_c() +
    geom_smooth(method = "lm", color = "blue") +
    labs(title = title, x = x, y = y) +
    theme_minimal()
}

p1 <- plot_hexbin_correlations(df, "phosphosite_intensity", "protein_intensity", "Before Correction")
p2 <- plot_hexbin_correlations(df, "corrected_method1", "protein_intensity", "After Correction (Method 1)")
p3 <- plot_hexbin_correlations(df, "corrected_method2", "protein_intensity", "After Correction (Method 2)")

# Arrange plots in a grid
grid.arrange(p1, p2, p3, ncol = 3)

# Boxplots for consistency across replicates and conditions
boxplot_data <- df %>% 
  gather(key = "method", value = "intensity", phosphosite_intensity, corrected_method1, corrected_method2)

boxplot_data$method <- factor(boxplot_data$method, 
                              levels = c("phosphosite_intensity", "corrected_method1", "corrected_method2"), 
                              labels = c("Before Correction", "Method 1", "Method 2"))

p4 <- ggplot(boxplot_data, aes(x = method, y = intensity, fill = method)) +
  geom_boxplot() +
  facet_wrap(~ condition) +
  labs(title = "Consistency Across Replicates and Conditions", x = "Method", y = "Phosphosite Intensity") +
  theme_minimal()

print(p4)

# Density plots to compare distributions
density_data <- df %>% 
  gather(key = "method", value = "intensity", phosphosite_intensity, corrected_method1, corrected_method2)

density_data$method <- factor(density_data$method, 
                              levels = c("phosphosite_intensity", "corrected_method1", "corrected_method2"), 
                              labels = c("Before Correction", "Method 1", "Method 2"))

p5 <- ggplot(density_data, aes(x = intensity, fill = method)) +
  geom_density(alpha = 0.5) +
  labs(title = "Density Plots for Phosphosite Intensities", x = "Phosphosite Intensity", y = "Density") +
  theme_minimal()

print(p5)
